# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.
  
    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://vagrantcloud.com/search.
    config.vm.box = "archlinux/archlinux"
    config.ssh.shell = "sh"
  
    config.vm.provider "virtualbox" do |v|
      v.memory = 4096
      v.cpus = 4
    end
  
    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    # config.vm.network "forwarded_port", guest: 80, host: 8080
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access
    # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network "private_network", ip: "192.168.33.10"
  
    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"
  
    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"
  
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.
    config.vm.provision "file", source: "../id_rsa.pub", destination: ".ssh/id_rsa.pub"
    config.vm.provision "file", source: "../id_rsa", destination: ".ssh/id_rsa"
    config.vm.provision "file", source: "../.gnupg", destination: ".gnupg"
  
    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    config.vm.provision "shell", privileged: true, inline: <<-SHELL
    pacman -Syu --noconfirm
    pacman -Syu --noconfirm jq git base-devel sudo go openssh emacs
  SHELL
  
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
  
    git config --global user.email "jgmath2000@gmail.com"
    git config --global user.name "Jason Gauci"
    ssh-keyscan github.com >> ~/.ssh/known_hosts
    ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
  
    sudo chmod -R 0700 ~/.gnupg ~/.ssh

    git clone https://aur.archlinux.org/yay.git
    pushd yay
    makepkg -si --noconfirm
    yay -Syu --noconfirm eternalterminal
    popd

    git clone ssh://aur@aur.archlinux.org/eternalterminal.git arch_et
    
    git clone --branch `curl https://api.github.com/repos/mistertea/EternalTerminal/releases/latest | jq '.tag_name' | sed 's/"//g'` git@github.com:MisterTea/EternalTerminal.git
    mkdir -p EternalTerminal/build
    pushd EternalTerminal/build
    cmake ..
    make -j`nproc`
  SHELL
  end
  