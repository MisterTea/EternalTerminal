<?xml version="1.0" encoding="UTF-8"?>
<testsuitesloose text artifact
>
  <testsuite name="<exe-name>" errors="17" failures="125" tests="1471" hostname="tbd" time="{duration}" timestamp="{iso8601-timestamp}">
    <properties>
      <property name="filters" value="~[!nonportable]~[!benchmark]~[approvals]"/>
      <property name="random-seed" value="1"/>
    </properties>
    <testcase classname="<exe-name>.global" name="# A test name that starts with a #" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#1005: Comparing pointer to int and long (NULL can be either on various systems)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#1027" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#1147" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#1175 - Hidden Test" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#1238" time="{duration}"/>
    <testcase classname="<exe-name>.(Fixture_1245&lt;int, int>)" name="#1245" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#1403" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#1455 - INFO and WARN can start with a linebreak" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#1514: stderr/stdout is not captured in tests aborted by an exception" time="{duration}">
      <failure type="FAIL">
1514
Tricky.tests.cpp:<line number>
      </failure>
      <system-out>
This would not be caught previously
      </system-out>
      <system-err>
Nor would this
      </system-err>
    </testcase>
    <testcase classname="<exe-name>.global" name="#1548" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#748 - captures with unexpected exceptions/outside assertions" time="{duration}">
      <error type="TEST_CASE">
expected exception
answer := 42
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="#748 - captures with unexpected exceptions/inside REQUIRE_NOTHROW" time="{duration}">
      <error message="thisThrows()" type="REQUIRE_NOTHROW">
expected exception
answer := 42
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="#748 - captures with unexpected exceptions/inside REQUIRE_THROWS" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#809" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#833" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#835 -- errno should not be touched by Catch" time="{duration}">
      <failure message="1 == 0" type="CHECK">
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="#872" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#961 -- Dynamically created sections should all be reported/Looped section 0" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#961 -- Dynamically created sections should all be reported/Looped section 1" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#961 -- Dynamically created sections should all be reported/Looped section 2" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#961 -- Dynamically created sections should all be reported/Looped section 3" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="#961 -- Dynamically created sections should all be reported/Looped section 4" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="'Not' checks that should fail" time="{duration}">
      <failure message="false != false" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="true != true" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="false" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="!true" type="CHECK_FALSE">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="false" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="!true" type="CHECK_FALSE">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="false" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="!(1 == 1)" type="CHECK_FALSE">
Condition.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="'Not' checks that should succeed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="(unimplemented) static bools can be evaluated/compare to true" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="(unimplemented) static bools can be evaluated/compare to false" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="(unimplemented) static bools can be evaluated/negation" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="(unimplemented) static bools can be evaluated/double negation" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="(unimplemented) static bools can be evaluated/direct" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="3x3x3 ints" time="{duration}"/>
    <testcase classname="<exe-name>.TestClass" name="A METHOD_AS_TEST_CASE based test run that fails" time="{duration}">
      <failure message="&quot;hello&quot; == &quot;world&quot;" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.TestClass" name="A METHOD_AS_TEST_CASE based test run that succeeds" time="{duration}"/>
    <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;float>" time="{duration}">
      <failure message="0 == 1" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;int>" time="{duration}">
      <failure message="0 == 1" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;float>" time="{duration}">
      <failure message="0 == 1" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;int>" time="{duration}">
      <failure message="0 == 1" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;float>" time="{duration}"/>
    <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;int>" time="{duration}"/>
    <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;float>" time="{duration}"/>
    <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;int>" time="{duration}"/>
    <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - double" time="{duration}">
      <failure message="1.0 == 2" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - float" time="{duration}">
      <failure message="1.0f == 2" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - int" time="{duration}">
      <failure message="1 == 2" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - double" time="{duration}"/>
    <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float" time="{duration}"/>
    <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int" time="{duration}"/>
    <testcase classname="<exe-name>.Fixture" name="A TEST_CASE_METHOD based test run that fails" time="{duration}">
      <failure message="1 == 2" type="REQUIRE">
Class.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.Fixture" name="A TEST_CASE_METHOD based test run that succeeds" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="A Template product test case - Foo&lt;float>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="A Template product test case - Foo&lt;int>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="A Template product test case - std::vector&lt;float>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="A Template product test case - std::vector&lt;int>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="A comparison that uses literals instead of the normal constructor" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="A couple of nested sections followed by a failure" time="{duration}">
      <failure type="FAIL">
to infinity and beyond
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="A couple of nested sections followed by a failure/Outer/Inner" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="A failing expression with a non streamable type is still captured" time="{duration}">
      <failure message="0x<hex digits> == 0x<hex digits>" type="CHECK">
Tricky.tests.cpp:<line number>
      </failure>
      <failure message="{?} == {?}" type="CHECK">
Tricky.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Absolute margin" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="An expression with side-effects should only be evaluated once" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="An unchecked exception reports the line of the last assertion" time="{duration}">
      <error message="{Unknown expression after the reported line}">
unexpected exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Anonymous test case 1" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Approx setters validate their arguments" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Approx with exactly-representable margin" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Approximate PI" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Approximate comparisons with different epsilons" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Approximate comparisons with floats" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Approximate comparisons with ints" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Approximate comparisons with mixed numeric types" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Arbitrary predicate matcher/Function pointer" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Arbitrary predicate matcher/Lambdas + different type" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Assertions then sections" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Assertions then sections/A section" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Assertions then sections/A section/Another section" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Assertions then sections/A section/Another other section" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Assorted miscellaneous tests" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Bitfields can be captured (#1027)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="CAPTURE can deal with complex expressions" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="CAPTURE can deal with complex expressions involving commas" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="CAPTURE parses string and character constants" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Capture and info messages/Capture should stringify like assertions" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Capture and info messages/Info should NOT stringify the way assertions do" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Character pretty printing/Specifically escaped" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Character pretty printing/General chars" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Character pretty printing/Low ASCII" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Commas in various macros are allowed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Comparing function pointers" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Comparison with explicitly convertible types" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Comparisons between ints where one side is computed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Comparisons between unsigned ints and negative signed ints match c++ standard behaviour" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Comparisons with int literals don't warn when mixing signed/ unsigned" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Contains string matcher" time="{duration}">
      <failure message="&quot;this string contains 'abc' as a substring&quot; contains: &quot;not there&quot; (case insensitive)" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="&quot;this string contains 'abc' as a substring&quot; contains: &quot;STRING&quot;" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Custom exceptions can be translated when testing for nothrow" time="{duration}">
      <error message="throwCustom()" type="REQUIRE_NOTHROW">
custom exception - not std
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Custom exceptions can be translated when testing for throwing as something else" time="{duration}">
      <error message="throwCustom(), std::exception" type="REQUIRE_THROWS_AS">
custom exception - not std
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Custom std-exceptions can be custom translated" time="{duration}">
      <error type="TEST_CASE">
custom std exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Default scale is invisible to comparison" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Directly creating an EnumInfo" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="EndsWith string matcher" time="{duration}">
      <failure message="&quot;this string contains 'abc' as a substring&quot; ends with: &quot;Substring&quot;" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="&quot;this string contains 'abc' as a substring&quot; ends with: &quot;this&quot; (case insensitive)" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Enums can quickly have stringification enabled using REGISTER_ENUM" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Epsilon only applies to Approx's value" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Equality checks that should fail" time="{duration}">
      <failure message="7 == 6" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 == 8" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 == 0" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="9.1f == Approx( 9.1099996567 )" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="9.1f == Approx( 9.0 )" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="9.1f == Approx( 1.0 )" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="9.1f == Approx( 0.0 )" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="3.1415926535 == Approx( 3.1415 )" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; == &quot;goodbye&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; == &quot;hell&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; == &quot;hello1&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="5 == 6" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="1.3 == Approx( 1.301 )" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Equality checks that should succeed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Equals" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Equals string matcher" time="{duration}">
      <failure message="&quot;this string contains 'abc' as a substring&quot; equals: &quot;this string contains 'ABC' as a substring&quot;" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="&quot;this string contains 'abc' as a substring&quot; equals: &quot;something else&quot; (case insensitive)" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Exception matchers that fail/No exception" time="{duration}">
      <failure message="doesNotThrow(), SpecialException, ExceptionMatcher{1}" type="CHECK_THROWS_MATCHES">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="doesNotThrow(), SpecialException, ExceptionMatcher{1}" type="REQUIRE_THROWS_MATCHES">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Exception matchers that fail/Type mismatch" time="{duration}">
      <error message="throwsAsInt(1), SpecialException, ExceptionMatcher{1}" type="CHECK_THROWS_MATCHES">
Unknown exception
Matchers.tests.cpp:<line number>
      </error>
      <error message="throwsAsInt(1), SpecialException, ExceptionMatcher{1}" type="REQUIRE_THROWS_MATCHES">
Unknown exception
Matchers.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Exception matchers that fail/Contents are wrong" time="{duration}">
      <failure message="SpecialException::what special exception has value of 1" type="CHECK_THROWS_MATCHES">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="SpecialException::what special exception has value of 1" type="REQUIRE_THROWS_MATCHES">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Exception matchers that succeed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Exception messages can be tested for/exact match" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Exception messages can be tested for/different case" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Exception messages can be tested for/wildcarded" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Expected exceptions that don't throw or unexpected exceptions fail the test" time="{duration}">
      <error message="thisThrows(), std::string" type="CHECK_THROWS_AS">
expected exception
Exception.tests.cpp:<line number>
      </error>
      <failure message="thisDoesntThrow(), std::domain_error" type="CHECK_THROWS_AS">
Exception.tests.cpp:<line number>
      </failure>
      <error message="thisThrows()" type="CHECK_NOTHROW">
expected exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="FAIL aborts the test" time="{duration}">
      <failure type="FAIL">
This is a failure
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="FAIL does not require an argument" time="{duration}">
      <failure type="FAIL">
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="FAIL_CHECK does not abort the test" time="{duration}">
      <failure type="FAIL_CHECK">
This is a failure
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Factorials are computed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Floating point matchers: double/Margin" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Floating point matchers: double/ULPs" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Floating point matchers: double/Composed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Floating point matchers: double/Constructor validation" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Floating point matchers: float/Margin" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Floating point matchers: float/ULPs" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Floating point matchers: float/Composed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Floating point matchers: float/Constructor validation" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Filtering by predicate/Basic usage" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Filtering by predicate/Throws if there are no matching values" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Shortening a range" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Transforming elements/Same type" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Transforming elements/Different type" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Transforming elements/Different deduced type" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Repeating a generator" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Chunking a generator into sized pieces/Number of elements in source is divisible by chunk size" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Chunking a generator into sized pieces/Number of elements in source is not divisible by chunk size" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- adapters/Chunking a generator into sized pieces/Throws on too small generators" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- simple/one" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators -- simple/two" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Single value" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Preset values" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Generator combinator" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Explicitly typed generator sequence" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Filter generator" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Take generator/Take less" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Take generator/Take more" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Map with explicit return type" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Map with deduced return type" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Repeat/Singular repeat" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Repeat/Actual repeat" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive auto step/Integer" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Range/Negative auto step/Integer" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Integer/Exact" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Integer/Slightly over end" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Integer/Slightly under end" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Range/Negative manual step/Integer/Exact" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Range/Negative manual step/Integer/Slightly over end" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Generators internals/Range/Negative manual step/Integer/Slightly under end" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Greater-than inequalities with different epsilons" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="INFO and WARN do not abort tests" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="INFO gets logged on failure" time="{duration}">
      <failure message="2 == 1" type="REQUIRE">
this message should be logged
so should this
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="INFO gets logged on failure, even if captured before successful assertions" time="{duration}">
      <failure message="2 == 1" type="CHECK">
this message may be logged later
this message should be logged
Message.tests.cpp:<line number>
      </failure>
      <failure message="2 == 0" type="CHECK">
this message may be logged later
this message should be logged
and this, but later
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="INFO is reset for each loop" time="{duration}">
      <failure message="10 &lt; 10" type="REQUIRE">
current counter 10
i := 10
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Inequality checks that should fail" time="{duration}">
      <failure message="7 != 7" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="9.1f != Approx( 9.1000003815 )" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="3.1415926535 != Approx( 3.1415926535 )" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; != &quot;hello&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="5 != 5" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Inequality checks that should succeed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Less-than inequalities with different epsilons" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="ManuallyRegistered" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Matchers can be (AllOf) composed with the &amp;&amp; operator" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Matchers can be (AnyOf) composed with the || operator" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Matchers can be composed with both &amp;&amp; and ||" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Matchers can be composed with both &amp;&amp; and || - failing" time="{duration}">
      <failure message="&quot;this string contains 'abc' as a substring&quot; ( ( contains: &quot;string&quot; or contains: &quot;different&quot; ) and contains: &quot;random&quot; )" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Matchers can be negated (Not) with the ! operator" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Matchers can be negated (Not) with the ! operator - failing" time="{duration}">
      <failure message="&quot;this string contains 'abc' as a substring&quot; not contains: &quot;substring&quot;" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Mismatching exception messages failing the test" time="{duration}">
      <failure message="&quot;expected exception&quot; equals: &quot;should fail&quot;" type="REQUIRE_THROWS_WITH">
Exception.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Nested generators and captured variables" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Nice descriptive name" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Non-std exceptions can be translated" time="{duration}">
      <error type="TEST_CASE">
custom exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Objects that evaluated in boolean contexts can be checked" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Optionally static assertions" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Ordering comparison checks that should fail" time="{duration}">
      <failure message="7 > 7" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 &lt; 7" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 > 8" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 &lt; 6" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 &lt; 0" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 &lt; -1" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 >= 8" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="7 &lt;= 6" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="9.1f &lt; 9" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="9.1f > 10" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="9.1f > 9.2" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; > &quot;hello&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; &lt; &quot;hello&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; > &quot;hellp&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; > &quot;z&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; &lt; &quot;hellm&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; &lt; &quot;a&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; >= &quot;z&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
      <failure message="&quot;hello&quot; &lt;= &quot;a&quot;" type="CHECK">
Condition.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Ordering comparison checks that should succeed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Output from all sections is reported/one" time="{duration}">
      <failure type="FAIL">
Message from section one
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Output from all sections is reported/two" time="{duration}">
      <failure type="FAIL">
Message from section two
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Empty test spec should have no filters" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Test spec from empty string should have no filters" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Test spec from just a comma should have no filters" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Test spec from name should have one filter" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Test spec from quoted name should have one filter" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Test spec from name should have one filter" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Wildcard at the start" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Wildcard at the end" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Wildcard at both ends" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Redundant wildcard at the start" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Redundant wildcard at the end" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Redundant wildcard at both ends" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Wildcard at both ends, redundant at start" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Just wildcard" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Single tag" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Single tag, two matches" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Two tags" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Two tags, spare separated" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Wildcarded name and tag" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/Single tag exclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/One tag exclusion and one tag inclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/One tag exclusion and one wldcarded name inclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/One tag exclusion, using exclude:, and one wldcarded name inclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/name exclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/wildcarded name exclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/wildcarded name exclusion with tag inclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/wildcarded name exclusion, using exclude:, with tag inclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/two wildcarded names" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/empty tag" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/empty quoted name" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Parse test names and tags/quoted string followed by tag exclusion" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Pointers can be compared to null" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Precision of floating point stringification can be set/Floats" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Precision of floating point stringification can be set/Double" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Predicate matcher can accept const char*" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/empty args don't cause a crash" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/default - no arguments" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/test lists/Specify one test case using" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/test lists/Specify one test case exclusion using exclude:" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/test lists/Specify one test case exclusion using ~" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/reporter/-r/console" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/reporter/-r/xml" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/reporter/--reporter/junit" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/reporter/Only one reporter is accepted" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/reporter/must match one of the available ones" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/debugger/-b" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/debugger/--break" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/abort/-a aborts after first failure" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/abort/-x 2 aborts after two failures" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/abort/-x must be numeric" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/nothrow/-e" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/nothrow/--nothrow" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/output filename/-o filename" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/output filename/--out" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/combinations/Single character flags can be combined" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/use-colour/without option" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/use-colour/auto" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/use-colour/yes" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/use-colour/no" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Process can be configured on command line/use-colour/error" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Product with differing arities - std::tuple&lt;int, double, float>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Product with differing arities - std::tuple&lt;int, double>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Product with differing arities - std::tuple&lt;int>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Reconstruction should be based on stringification: #914" time="{duration}">
      <failure message="Hey, its truthy!" type="CHECK">
Decomposition.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Regex string matcher" time="{duration}">
      <failure message="&quot;this string contains 'abc' as a substring&quot; matches &quot;this STRING contains 'abc' as a substring&quot; case sensitively" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="&quot;this string contains 'abc' as a substring&quot; matches &quot;contains 'abc' as a substring&quot; case sensitively" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="&quot;this string contains 'abc' as a substring&quot; matches &quot;this string contains 'abc' as a&quot; case sensitively" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Regression test #1" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="SUCCEED counts as a test pass" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="SUCCEED does not require an argument" time="{duration}"/>
    <testcase classname="<exe-name>.Fixture" name="Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods/Given: No operations precede me" time="{duration}"/>
    <testcase classname="<exe-name>.Fixture" name="Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods/Given: No operations precede me/When: We get the count/Then: Subsequently values are higher" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Scenario: Do that thing with the thing/Given: This stuff exists/And given: And some assumption/When: I do this/Then: it should do this" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Scenario: Do that thing with the thing/Given: This stuff exists/And given: And some assumption/When: I do this/Then: it should do this/And: do that" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Scenario: This is a really long scenario name to see how the list command deals with wrapping/Given: A section name that is so long that it cannot fit in a single console width/When: The test headers are printed as part of the normal running of the scenario/Then: The, deliberately very long and overly verbose (you see what I did there?) section names must wrap, along with an indent" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Scenario: Vector resizing affects size and capacity/Given: an empty vector" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Scenario: Vector resizing affects size and capacity/Given: an empty vector/When: it is made larger/Then: the size and capacity go up" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Scenario: Vector resizing affects size and capacity/Given: an empty vector/When: it is made larger/Then: the size and capacity go up/And when: it is made smaller again/Then: the size goes down but the capacity stays the same" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Scenario: Vector resizing affects size and capacity/Given: an empty vector/When: we reserve more space/Then: The capacity is increased but the size remains the same" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Sends stuff to stdout and stderr" time="{duration}">
      <system-out>
A string sent directly to stdout
      </system-out>
      <system-err>
A string sent directly to stderr
A string sent to stderr via clog
      </system-err>
    </testcase>
    <testcase classname="<exe-name>.global" name="Some simple comparisons between doubles" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Standard output from all sections is reported/two" time="{duration}">
      <system-out>
Message from section one
Message from section two
      </system-out>
    </testcase>
    <testcase classname="<exe-name>.global" name="StartsWith string matcher" time="{duration}">
      <failure message="&quot;this string contains 'abc' as a substring&quot; starts with: &quot;This String&quot;" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="&quot;this string contains 'abc' as a substring&quot; starts with: &quot;string&quot; (case insensitive)" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Static arrays are convertible to string/Single item" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Static arrays are convertible to string/Multiple" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Static arrays are convertible to string/Non-trivial inner items" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="String matchers" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/Empty string" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/From string literal" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/From string literal/c_str() does not cause copy" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/From sub-string" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/Substrings/zero-based substring" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/Substrings/c_str() causes copy" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/Substrings/non-zero-based substring" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/Substrings/Pointer values of full refs should match" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/Substrings/Pointer values of substring refs should not match" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/Comparisons" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/from std::string/implicitly constructed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/from std::string/explicitly constructed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/from std::string/assigned" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/to std::string/implicitly constructed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/to std::string/explicitly constructed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/to std::string/assigned" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="StringRef/Counting utf-8 codepoints" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Stringifying std::chrono::duration helpers" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Stringifying std::chrono::duration with weird ratios" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Stringifying std::chrono::time_point&lt;system_clock>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tabs and newlines show in output" time="{duration}">
      <failure message="&quot;if ($b == 10) {
		$a	= 20;
}&quot;
==
&quot;if ($b == 10) {
	$a = 20;
}
&quot;" type="CHECK">
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Tag alias can be registered against tag patterns/The same tag alias can only be registered once" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tag alias can be registered against tag patterns/Tag aliases must be of the form [@name]" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - float" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - float/resizing bigger changes size and capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - float/resizing smaller changes size but not capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - float/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - float/reserving bigger changes capacity but not size" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - float/reserving smaller does not change size or capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - int" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - int/resizing bigger changes size and capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - int/resizing smaller changes size but not capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - int/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - int/reserving bigger changes capacity but not size" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - int/reserving smaller does not change size or capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::string" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::string/resizing bigger changes size and capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::string/resizing smaller changes size but not capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::string/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::string/reserving bigger changes capacity but not size" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::string/reserving smaller does not change size or capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/resizing bigger changes size and capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/resizing smaller changes size but not capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/reserving bigger changes capacity but not size" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/reserving smaller does not change size or capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Test case with one argument" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Test enum bit values" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="The NO_FAIL macro reports a failure but does not fail the test" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="This test 'should' fail but doesn't" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Thrown string literals are translated" time="{duration}">
      <error type="TEST_CASE">
For some reason someone is throwing a string literal!
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Tracker" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/successfully close one section" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/fail one section" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/fail one section/re-enter after failed section" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/fail one section/re-enter after failed section and find next section" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/successfully close one section, then find another" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/successfully close one section, then find another/Re-enter - skips S1 and enters S2" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/successfully close one section, then find another/Re-enter - skips S1 and enters S2/Successfully close S2" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/successfully close one section, then find another/Re-enter - skips S1 and enters S2/fail S2" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Tracker/open a nested section" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Unexpected exceptions can be translated" time="{duration}">
      <error type="TEST_CASE">
3.14
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Use a custom approx" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Variadic macros/Section with one argument" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector Approx matcher/Empty vector is roughly equal to an empty vector" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector Approx matcher/Vectors with elements/A vector is approx equal to itself" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector Approx matcher/Vectors with elements/Different length" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector Approx matcher/Vectors with elements/Same length, different elements" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector Approx matcher -- failing/Empty and non empty vectors are not approx equal" time="{duration}">
      <failure message="{  } is approx: { 1.0, 2.0 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Vector Approx matcher -- failing/Just different vectors" time="{duration}">
      <failure message="{ 2.0, 4.0, 6.0 } is approx: { 1.0, 3.0, 5.0 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Vector matchers/Contains (element)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector matchers/Contains (vector)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector matchers/Contains (element), composed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector matchers/Equals" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector matchers/UnorderedEquals" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Vector matchers that fail/Contains (element)" time="{duration}">
      <failure message="{ 1, 2, 3 } Contains: -1" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="{  } Contains: 1" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Vector matchers that fail/Contains (vector)" time="{duration}">
      <failure message="{  } Contains: { 1, 2, 3 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="{ 1, 2, 3 } Contains: { 1, 2, 4 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Vector matchers that fail/Equals" time="{duration}">
      <failure message="{ 1, 2, 3 } Equals: { 1, 2 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="{ 1, 2 } Equals: { 1, 2, 3 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="{  } Equals: { 1, 2, 3 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="{ 1, 2, 3 } Equals: {  }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="Vector matchers that fail/UnorderedEquals" time="{duration}">
      <failure message="{ 1, 2, 3 } UnorderedEquals: {  }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="{  } UnorderedEquals: { 1, 2, 3 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="{ 1, 3 } UnorderedEquals: { 1, 2, 3 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
      <failure message="{ 3, 1 } UnorderedEquals: { 1, 2, 3 }" type="CHECK_THAT">
Matchers.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="When checked exceptions are thrown they can be expected or unexpected" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown directly they are always failures" time="{duration}">
      <error type="TEST_CASE">
unexpected exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown during a CHECK the test should continue" time="{duration}">
      <error message="thisThrows() == 0" type="CHECK">
expected exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown during a REQUIRE the test should abort fail" time="{duration}">
      <error message="thisThrows() == 0" type="REQUIRE">
expected exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown from functions they are always failures" time="{duration}">
      <error message="thisThrows() == 0" type="CHECK">
expected exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown from sections they are always failures/section name" time="{duration}">
      <error type="TEST_CASE">
unexpected exception
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="Where the LHS is not a simple value" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="Where there is more to the expression after the RHS" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="X/level/0/a" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="X/level/0/b" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="X/level/1/a" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="X/level/1/b" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode/normal string" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode/empty string" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode/string with ampersand" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode/string with less-than" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode/string with greater-than" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode/string with quotes" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode/string with control char (1)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode/string with control char (x7F)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode: UTF-8/Valid utf-8 strings" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode: UTF-8/Invalid utf-8 strings/Various broken strings" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode: UTF-8/Invalid utf-8 strings/Overlong encodings" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode: UTF-8/Invalid utf-8 strings/Surrogate pairs" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode: UTF-8/Invalid utf-8 strings/Invalid start byte" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="XmlEncode: UTF-8/Invalid utf-8 strings/Missing continuation byte(s)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="array&lt;int, N> -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="atomic if" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="boolean member" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="checkedElse" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="checkedElse, failing" time="{duration}">
      <failure message="false" type="CHECKED_ELSE">
Misc.tests.cpp:<line number>
      </failure>
      <failure message="false" type="REQUIRE">
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="checkedIf" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="checkedIf, failing" time="{duration}">
      <failure message="false" type="CHECKED_IF">
Misc.tests.cpp:<line number>
      </failure>
      <failure message="false" type="REQUIRE">
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="comparisons between const int variables" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="comparisons between int variables" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="even more nested SECTION tests/c/d (leaf)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="even more nested SECTION tests/c/e (leaf)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="even more nested SECTION tests/f (leaf)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="just failure" time="{duration}">
      <failure type="FAIL">
Previous info should not be seen
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="just failure after unscoped info" time="{duration}">
      <failure type="FAIL">
previous unscoped info SHOULD not be seen
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="long long" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 0" time="{duration}">
      <failure message="0 > 1" type="CHECK">
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 1" time="{duration}">
      <failure message="1 > 1" type="CHECK">
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 2" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 3" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 4" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 5" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 6" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 7" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 8" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 9" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="looped tests" time="{duration}">
      <failure message="1 == 0" type="CHECK">
Testing if fib[0] (1) is even
Misc.tests.cpp:<line number>
      </failure>
      <failure message="1 == 0" type="CHECK">
Testing if fib[1] (1) is even
Misc.tests.cpp:<line number>
      </failure>
      <failure message="1 == 0" type="CHECK">
Testing if fib[3] (3) is even
Misc.tests.cpp:<line number>
      </failure>
      <failure message="1 == 0" type="CHECK">
Testing if fib[4] (5) is even
Misc.tests.cpp:<line number>
      </failure>
      <failure message="1 == 0" type="CHECK">
Testing if fib[6] (13) is even
Misc.tests.cpp:<line number>
      </failure>
      <failure message="1 == 0" type="CHECK">
Testing if fib[7] (21) is even
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="mix info, unscoped info and warning" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="more nested SECTION tests/equal/doesn't equal" time="{duration}">
      <failure message="1 == 2" type="REQUIRE">
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="more nested SECTION tests/doesn't equal/not equal" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="more nested SECTION tests/doesn't equal/less than" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="nested SECTION tests/doesn't equal" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="nested SECTION tests/doesn't equal/not equal" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="non streamable - with conv. op" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="non-copyable objects" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="not allowed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="not prints unscoped info from previous failures" time="{duration}">
      <failure message="false" type="REQUIRE">
this SHOULD be seen
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="null strings" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="null_ptr" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="pair&lt;pair&lt;int,const char *,pair&lt;std::string,int> > -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="parseEnums/No enums" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="parseEnums/One enum value" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="parseEnums/Multiple enum values" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="pointer to class" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="print unscoped info if passing unscoped info is printed" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="prints unscoped info on failure" time="{duration}">
      <failure message="false" type="REQUIRE">
this SHOULD be seen
this SHOULD also be seen
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="prints unscoped info only for the first assertion" time="{duration}">
      <failure message="false" type="CHECK">
this SHOULD be seen only ONCE
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="random SECTION tests/doesn't equal" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="random SECTION tests/not equal" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="replaceInPlace/replace single char" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="replaceInPlace/replace two chars" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="replaceInPlace/replace first char" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="replaceInPlace/replace last char" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="replaceInPlace/replace all chars" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="replaceInPlace/replace no chars" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="replaceInPlace/escape '" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="send a single char to INFO" time="{duration}">
      <failure message="false" type="REQUIRE">
3
Misc.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="sends information to INFO" time="{duration}">
      <failure message="false" type="REQUIRE">
hi
i := 7
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="shortened hide tags are split apart" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="splitString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stacks unscoped info in loops" time="{duration}">
      <failure message="false" type="CHECK">
Count 1 to 3...
1
2
3
Message.tests.cpp:<line number>
      </failure>
      <failure message="false" type="CHECK">
Count 4 to 6...
4
5
6
Message.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="std::map is convertible string/empty" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="std::map is convertible string/single item" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="std::map is convertible string/several items" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="std::pair&lt;int,const std::string> -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="std::pair&lt;int,std::string> -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="std::set is convertible string/empty" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="std::set is convertible string/single item" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="std::set is convertible string/several items" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="std::vector&lt;std::pair&lt;std::string,int> > -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="string literals of different sizes can be compared" time="{duration}">
      <failure message="&quot;first&quot; == &quot;second&quot;" type="REQUIRE">
Tricky.tests.cpp:<line number>
      </failure>
    </testcase>
    <testcase classname="<exe-name>.global" name="stringify ranges" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stringify( has_maker )" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stringify( has_maker_and_operator )" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stringify( has_neither )" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stringify( has_operator )" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stringify( has_template_operator )" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stringify( vectors&lt;has_maker> )" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stringify( vectors&lt;has_maker_and_operator> )" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="stringify( vectors&lt;has_operator> )" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="strlen3" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="tables" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="thrown std::strings are translated" time="{duration}">
      <error type="TEST_CASE">
Why would you throw a std::string?
Exception.tests.cpp:<line number>
      </error>
    </testcase>
    <testcase classname="<exe-name>.global" name="toString on const wchar_t const pointer returns the string contents" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="toString on const wchar_t pointer returns the string contents" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="toString on wchar_t const pointer returns the string contents" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="toString on wchar_t returns the string contents" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="toString(enum class w/operator&lt;&lt;)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="toString(enum class)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="toString(enum w/operator&lt;&lt;)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="toString(enum)" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="tuple&lt;>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="tuple&lt;float,int>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="tuple&lt;int>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="tuple&lt;0,int,const char *>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="tuple&lt;string,string>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="tuple&lt;tuple&lt;int>,tuple&lt;>,float>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vec&lt;vec&lt;string,alloc>> -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vector&lt;bool> -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vector&lt;int,allocator> -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vector&lt;int> -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vector&lt;string> -> toString" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vectors can be sized and resized" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vectors can be sized and resized/resizing bigger changes size and capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vectors can be sized and resized/resizing smaller changes size but not capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vectors can be sized and resized/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vectors can be sized and resized/reserving bigger changes capacity but not size" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="vectors can be sized and resized/reserving smaller does not change size or capacity" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="xmlentitycheck/embedded xml: &lt;test>it should be possible to embed xml characters, such as &lt;, &quot; or &amp;, or even whole &lt;xml>documents&lt;/xml> within an attribute&lt;/test>" time="{duration}"/>
    <testcase classname="<exe-name>.global" name="xmlentitycheck/encoded chars: these should all be encoded: &amp;&amp;&amp;&quot;&quot;&quot;&lt;&lt;&lt;&amp;&quot;&lt;&lt;&amp;&quot;" time="{duration}"/>
    <system-out>
This would not be caught previously
A string sent directly to stdout
Message from section one
Message from section two
    </system-out>
    <system-err>
Nor would this
A string sent directly to stderr
A string sent to stderr via clog
    </system-err>
  </testsuite>
</testsuites>
