#!/bin/bash

PORT="2022"
USER=${USER}
ET_COMMAND=""
SSH_COMMAND=""
TMP_DIR=${TMPDIR:-${TMP:-${TEMP:-/tmp}}}
LOG_DIR=$TMP_DIR
VERBOSITY=""

for i in "$@"
do
    case $i in
        -s=*|--ssh=*)
            SSH_COMMAND="${i#*=}"
            shift
            ;;
        -p=*|--port=*)
            PORT="${i#*=}"
            shift
            ;;
        -u=*|--user=*)
            USER="${i#*=}"
            shift
            ;;
        -l=*|--logdir=*)
            LOG_DIR="${i#*=}"
            shift
            ;;
        -v)
            VERBOSITY="--v=9"
            shift
            ;;
        -h|--help)
            printf "et (options) [user@]hostname[:port]

Options:
-h Basic usage
-s Special ssh command if necessary, otherwise set to user@hostname:22
-p Port for etserver to run on.  Don't set to the same port as ssh.  Default: 2022
-u Username to connect to ssh & ET
-l Directory where logs will go"
            exit 0
            ;;
        *)
            ET_COMMAND="${i}"
            ;;
    esac
done

ET_COMMAND_REGEX="^(([0-9a-zA-Z]+)@)?([^\/:?@#]+)(:([0-9]+))?$"

if [[ $ET_COMMAND =~ $ET_COMMAND_REGEX ]]; then
    ET_USER="${BASH_REMATCH[2]}"
    ET_HOSTNAME="${BASH_REMATCH[3]}"
    ET_PORT="${BASH_REMATCH[5]}"
    if [[ -n "$ET_USER" ]]; then
        USER=$ET_USER
    fi
    if [[ -n "$ET_HOSTNAME" ]]; then
        HOSTNAME=$ET_HOSTNAME
    fi
    if [[ -n "$ET_PORT" ]]; then
        PORT=$ET_PORT
    fi
else
    printf "Usage: ET (options) [user@]hostname[:port]"
    exit 1
fi

if [[ -z "$SSH_COMMAND" ]]; then
    # Assume we want to bring the user into the ssh command but not
    # the port.
    SSH_COMMAND=${USER}@${HOSTNAME}
fi

SERVER_BINARY="etserver"
CLIENT_BINARY="etclient"

PASSWORD_GENERATOR="env LC_CTYPE=C tr -dc \"a-zA-Z0-9\" < /dev/urandom | head -c 32"
SSH_PASSWORD_COMMAND="
ET_SERVER_COMMANDS=\`ps xwwo pgid,command | grep etserver\`
while read -r line; do
    PORT_REGEX=\"--port=([0-9]+)\"
    if [[ \$line =~ \$PORT_REGEX ]]; then
        SERVER_PORT=\"\${BASH_REMATCH[1]}\"
        if [[ $PORT == \"\$SERVER_PORT\" ]]; then
            printf \"Killing stale server.  Please wait 5 seconds...\\n\"
            printf \"\$line\\n\" | cut -d' ' -f1 | xargs -I repme kill -9 -repme
            sleep 3
        fi
    fi
done <<< \"\$ET_SERVER_COMMANDS\"
export SERVER_TMP_DIR=\${TMPDIR:-\${TMP:-\${TEMP:-/tmp}}}
export TMPFILE=\$(mktemp \"\$SERVER_TMP_DIR\"/et.XXXXXX)
export PASSWD=\`$PASSWORD_GENERATOR\`
printf \"%s\\n\" \"\$PASSWD\" > \$TMPFILE
nohup $SERVER_BINARY $VERBOSITY --alsologtostderr --passkeyfile=\$TMPFILE --port=$PORT > /tmp/et_err 2>&1 &
printf \"PASSWORD:\$PASSWD\\n\"
"
PASSWD=$(printf "%s\n" "$SSH_PASSWORD_COMMAND" | ssh "$SSH_COMMAND" | grep PASSWORD: | cut -d: -f2)

TMPFILE=$(mktemp "$TMP_DIR"/et.XXXXXX)
printf "%s\n" "$PASSWD" > "$TMPFILE"

$CLIENT_BINARY --passkeyfile="$TMPFILE" $VERBOSITY --host="$HOSTNAME" --port="$PORT" --log_dir="$LOG_DIR" 2> /tmp/et_err
